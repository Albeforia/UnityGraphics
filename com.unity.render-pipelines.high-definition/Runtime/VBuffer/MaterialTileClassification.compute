#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/VBuffer/VisibilityBufferCommon.hlsl"

#pragma enable_d3d11_debug_symbols

#pragma kernel MaterialReduction
#pragma kernel FinalReduction

TEXTURE2D_X_UINT2(_ClassificationTileInput);
TEXTURE2D_X_UINT(_BucketTileInput);

RW_TEXTURE2D_X(uint2, _ClassificationTile);
RW_TEXTURE2D_X(uint, _BucketTile);



#define GROUP_SIZE 8

#ifndef PLATFORM_SUPPORTS_WAVE_INTRINSICS
groupshared uint gs_minMatID[GROUP_SIZE * GROUP_SIZE];
groupshared uint gs_maxMatID[GROUP_SIZE * GROUP_SIZE];
groupshared uint gs_bucketID[GROUP_SIZE * GROUP_SIZE];
#endif

void ParallelReduction(uint threadIdx, uint minValueInput, uint maxValueInput, uint bucketValue, out uint minValue, out uint maxValue, out uint bucketOr)
{
#ifdef PLATFORM_SUPPORTS_WAVE_INTRINSICS
    minValue = WaveActiveMin(minValueInput);
    maxValue = WaveActiveMax(maxValueInput);
    bucketOr = WaveActiveBitOr(bucketValue);
    return;
#else
    gs_minMatID[threadIdx] = minValueInput;
    gs_maxMatID[threadIdx] = maxValueInput;
    gs_bucketID[threadIdx] = bucketValue;

    GroupMemoryBarrierWithGroupSync();

    UNITY_UNROLL
        for (uint s = (GROUP_SIZE * GROUP_SIZE) / 2u; s > 0u; s >>= 1u)
        {
            if (threadIdx < s)
            {
                gs_maxMatID[threadIdx] = max(gs_maxMatID[threadIdx], gs_maxMatID[threadIdx + s]);
                gs_minMatID[threadIdx] = min(gs_minMatID[threadIdx], gs_minMatID[threadIdx + s]);
                gs_bucketID[threadIdx] = (gs_bucketID[threadIdx] | gs_bucketID[threadIdx + s]);
            }

            GroupMemoryBarrierWithGroupSync();
        }
    minValue = gs_minMatID[0];
    maxValue = gs_maxMatID[0];
    bucketOr = gs_bucketID[0];
#endif
}

void ParallelReduction(uint threadIdx, uint value, uint bucketValue, out uint minValue, out uint maxValue, out uint bucketOr)
{
    ParallelReduction(threadIdx, value, value, bucketValue, minValue, maxValue, bucketOr);
}

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void MaterialReduction(uint3 id : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
    uint threadIdx = groupThreadId.y * GROUP_SIZE + groupThreadId.x;

    uint vbuffer = LOAD_TEXTURE2D_X(_VBuffer0, id.xy).x;

    uint triangleID, instanceID;
    UnpackVisibilityBuffer(vbuffer, instanceID, triangleID);

    InstanceVData instanceVData = _InstanceVDataBuffer[instanceID];
    uint matData = instanceVData.materialData;

    uint materialID = matData & 0xffff;
    uint bucketID = (matData >> 16) & 0xffff;
    // void ParallelReduction(uint threadIdx, uint value, uint bucketValue, out uint min, out uint max, out uint bucketOr)

    uint minMat, maxMat, bucketOR;
    ParallelReduction(threadIdx, materialID, bucketID, minMat, maxMat, bucketOR);

    if (any(id.xy > _ScreenSize.xy)) return;

    if (threadIdx == 0)
    {
        _ClassificationTile[COORD_TEXTURE2D_X(groupID.xy)] =  uint2(minMat, maxMat);
        _BucketTile[COORD_TEXTURE2D_X(groupID.xy)] = bucketOR;
    }
}


[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void FinalReduction(uint3 id : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
    uint threadIdx = groupThreadId.y * GROUP_SIZE + groupThreadId.x;
    //TEXTURE2D_X_UINT2(_ClassificationTileInput);
    //TEXTURE2D_X_UINT(_BucketTileInput);

    uint2 samplingCoord = min(id.xy, _ScreenSize.xy / 8);

    uint2 minMaxMatID = _ClassificationTileInput[COORD_TEXTURE2D_X(samplingCoord)];
    uint bucketID = _BucketTileInput[COORD_TEXTURE2D_X(samplingCoord)];

    uint minMat, maxMat, bucketOR;
    ParallelReduction(threadIdx, minMaxMatID.x, minMaxMatID.y, bucketID, minMat, maxMat, bucketOR);

    if (threadIdx == 0)
    {
        _ClassificationTile[COORD_TEXTURE2D_X(groupID.xy)] = uint2(minMat, maxMat);
        _BucketTile[COORD_TEXTURE2D_X(groupID.xy)] = bucketOR;
    }
}
