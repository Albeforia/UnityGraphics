#define HDRP_NEEDS_UVS (HDRP_USE_BASE_COLOR_MAP || HDRP_USE_MASK_MAP || USE_NORMAL_MAP || HDRP_USE_EMISSIVE_MAP)
#define HDRP_USE_EMISSIVE (HDRP_USE_EMISSIVE_MAP || HDRP_USE_EMISSIVE_COLOR || HDRP_USE_ADDITIONAL_EMISSIVE_COLOR)

${VFXBegin:VFXHDRPDecalVaryingsMacros}
#if (VFX_NEEDS_COLOR_INTERPOLATOR && HDRP_USE_BASE_COLOR) || HDRP_USE_ADDITIONAL_BASE_COLOR
#define VFX_VARYING_COLOR color.rgb
#define VFX_VARYING_ALPHA color.a
#endif

#if AFFECT_METALLIC
#define VFX_VARYING_METALLIC materialProperties.x
#endif

#if AFFECT_AMBIENT_OCCLUSION
#define VFX_VARYING_AMBIENT_OCCLUSION materialProperties.y
#endif

#if AFFECT_SMOOTHNESS
#define VFX_VARYING_SMOOTHNESS materialProperties.z
#endif

#if HDRP_USE_EMISSIVE_MAP
#define VFX_VARYING_EMISSIVESCALE materialProperties.w
#endif

#if HDRP_USE_EMISSIVE_COLOR || HDRP_USE_ADDITIONAL_EMISSIVE_COLOR
#define VFX_VARYING_EMISSIVE emissiveColor.rgb
#endif

#if USE_EXPOSURE_WEIGHT
#define VFX_VARYING_EXPOSUREWEIGHT emissiveColor.a
#endif

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_UV uv
#define VFX_VARYING_POSWS posWS
#define VFX_VARYING_FADEFACTOR fadeParameters.x
#if VFX_ENABLE_DECAL_LAYERS
#define VFX_VARYING_ANGLEFADE fadeParameters.yz
#define VFX_VARYING_DECALLAYER decalLayerMask
#endif
${VFXEnd}

${VFXBegin:VFXHDRPDecalDeclareVaryings}

#if (VFX_NEEDS_COLOR_INTERPOLATOR && HDRP_USE_BASE_COLOR) || HDRP_USE_ADDITIONAL_BASE_COLOR
VFX_OPTIONAL_INTERPOLATION float4 color : COLOR0;
#endif
#if HDRP_USE_EMISSIVE
VFX_OPTIONAL_INTERPOLATION float4 emissiveColor : COLOR1;
#endif

// x: metallic
// y: AO
// z: smoothness
// w: emissive scale
VFX_OPTIONAL_INTERPOLATION float4 materialProperties : TEXCOORD0;
float2 uv : TEXCOORD1; //unsure about the necessity of this one
float3 posWS : TEXCOORD2;
#if VFX_ENABLE_DECAL_LAYERS
float3 fadeParameters : TEXCOORD3;
uint decalLayerMask : TEXCOORD4;
#else
float fadeParameters : TEXCOORD3;
#endif

nointerpolation float4 viewToDecal0 : TEXCOORD5;
nointerpolation float4 viewToDecal1 : TEXCOORD6;
nointerpolation float4 viewToDecal2 : TEXCOORD7;

${VFXEnd}

${VFXBegin:VFXHDRPDecalFillVaryings}
#ifndef VFX_SHADERGRAPH

#ifdef VFX_VARYING_SMOOTHNESS
${VFXLoadParameter:{smoothness}}
o.VFX_VARYING_SMOOTHNESS = smoothness;
#endif

#ifdef VFX_VARYING_METALLIC
${VFXLoadParameter:{metallic}}
o.VFX_VARYING_METALLIC = metallic;
#endif

#ifdef VFX_VARYING_AMBIENT_OCCLUSION
${VFXLoadParameter:{ambientOcclusion}}
o.VFX_VARYING_AMBIENT_OCCLUSION = ambientOcclusion;
#endif

#if HDRP_USE_EMISSIVE_MAP
#ifdef VFX_VARYING_EMISSIVESCALE
${VFXLoadParameter:{emissiveScale}}
o.VFX_VARYING_EMISSIVESCALE = emissiveScale;
#endif
#endif

#ifdef VFX_VARYING_EMISSIVE
#if HDRP_USE_EMISSIVE_COLOR
o.VFX_VARYING_EMISSIVE = attributes.color;
#elif HDRP_USE_ADDITIONAL_EMISSIVE_COLOR
${VFXLoadParameter:{emissiveColor}}
o.VFX_VARYING_EMISSIVE = emissiveColor.rgb;
#endif
#endif

#if HDRP_USE_ADDITIONAL_BASE_COLOR
#ifdef VFX_VARYING_COLOR
${VFXLoadParameter:{baseColor}}
o.VFX_VARYING_COLOR = baseColor;
#endif
#endif
#endif
float4x4 viewToDecal = GetVFXToElementMatrix(
	attributes.axisX,
	attributes.axisY,
	attributes.axisZ,
	float3(attributes.angleX,attributes.angleY,attributes.angleZ),
	float3(attributes.pivotX,attributes.pivotY,attributes.pivotZ),
	size3,
	attributes.position);

#if VFX_LOCAL_SPACE
viewToDecal = mul(viewToDecal, VFXGetWorldToObjectMatrix());
#endif
viewToDecal = mul(viewToDecal, VFXGetViewToWorldMatrix());
o.viewToDecal0 = viewToDecal[0];
o.viewToDecal1 = viewToDecal[1];
o.viewToDecal2 = viewToDecal[2];

${VFXEnd}
