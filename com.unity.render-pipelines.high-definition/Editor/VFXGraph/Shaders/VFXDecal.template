
//TODO : Check for unnecessary includes / and for necessary ones
#define VFXComputePixelOutputToDBuffer(i, normalWS,outDBuffer) \
{ \
	DecalSurfaceData surfaceData; \
    ZERO_INITIALIZE(DecalSurfaceData, surfaceData); \
    VFXGetSurfaceDecalData(surfaceData,i,normalWS); \
 \
    ENCODE_INTO_DBUFFER(surfaceData, outDBuffer); \
}

void VFXGetSurfaceDecalData(out DecalSurfaceData surfaceData, VFX_VARYING_PS_INPUTS i, float3 normalWS)
{
	ZERO_INITIALIZE(DecalSurfaceData, surfaceData);
	VFXTransformPSInputs(i);

//Check light layer
#if VFX_ENABLE_DECAL_LAYERS
	DecalPrepassData material;
    ZERO_INITIALIZE(DecalPrepassData, material);
	// Clip the decal if it does not pass the decal layer mask of the receiving material.
	// Decal layer of the decal
	uint decalLayerMask = i.VFX_VARYING_DECALLAYER; //TODO : Does it really need to be a Varying ? Can't I use VFXLoadParameter here ?

	DecodeFromDecalPrepass(i.pos.xy, material);

	if ((decalLayerMask & material.decalLayerMask) == 0)
	{
		clip(-1);
	}

#endif

	float3 clipPos;
	clipPos.xy = (i.pos.xy / _ScreenParams.xy) * 2.0f - 1.0f;
	clipPos.z = VFXSampleDepth(i.pos);

	if (_ProjectionParams.x < 0)
        clipPos.y = -clipPos.y;

	float4 viewPos;

	if(IsPerspectiveProjection())
	{
		clipPos *= VFXLinearEyeDepth(clipPos.z); //TODO: Does not work with Orthographic projection
		viewPos.x = clipPos.x / UNITY_MATRIX_P[0][0];
		viewPos.y = clipPos.y / UNITY_MATRIX_P[1][1];
		viewPos.z = (clipPos.z - UNITY_MATRIX_P[2][3]) / UNITY_MATRIX_P[2][2];
		viewPos.w = 1.0f ;
	}
	else
	{
		viewPos.x = (clipPos.x - UNITY_MATRIX_P[0][3]) / UNITY_MATRIX_P[0][0];
		viewPos.y = (clipPos.y - UNITY_MATRIX_P[1][3]) / UNITY_MATRIX_P[1][1];
		viewPos.z = (clipPos.z - UNITY_MATRIX_P[2][3]) / UNITY_MATRIX_P[2][2];
		viewPos.w = 1.0f;
	}


	float4x4 viewToElement;
	viewToElement[0] = i.viewToDecal0;
	viewToElement[1] = i.viewToDecal1;
	viewToElement[2] = i.viewToDecal2;
	viewToElement[3] = float4(0,0,0,1);

	float3 elementPos = mul(viewToElement,viewPos).xyz * 2.0f;
	clip(1.0f - abs(elementPos));

	float2 uv = elementPos.xy * 0.5f + 0.5f;
	VFXUVData uvData = GetUVData(uv);
    float angleFadeFactor = 1.0f;
	float3x3 worldToElement = mul((float3x3)viewToElement, VFXGetWorldToViewRotMatrix()); //Transposed//TODO: Won't be correct for non-uniform scalings
	worldToElement[2] *= -1.0f; //Z points TOWARDS the surface, so we need to revert it

#if VFX_ENABLE_DECAL_LAYERS
	if (i.VFX_VARYING_ANGLEFADE.y < 0.0f) // if angle fade is enabled
	{
		float3 decalNormal = normalize(worldToElement[2].xyz);
		float dotAngle = dot(material.geomNormalWS, decalNormal);
		// See equation in DecalSystem.cs - simplified to a madd mul add here
		angleFadeFactor = saturate(i.VFX_VARYING_ANGLEFADE.x + i.VFX_VARYING_ANGLEFADE.y * (dotAngle * (dotAngle - 2.0f)));
	}
#endif
	float fadeFactor = i.VFX_VARYING_FADEFACTOR;
	fadeFactor *= angleFadeFactor;
	#if SHADERPASS == SHADERPASS_VFX_DBUFFER_PROJECTOR

	float4 color = float4(1,1,1,1);
    #if HDRP_USE_BASE_COLOR
    color *= VFXGetParticleColor(i);
    #elif HDRP_USE_ADDITIONAL_BASE_COLOR
    #if defined(VFX_VARYING_COLOR)
    color.xyz *= i.VFX_VARYING_COLOR;
    #endif
    #if defined(VFX_VARYING_ALPHA)
    color.a *= i.VFX_VARYING_ALPHA;
    #endif
    #endif
    #if HDRP_USE_BASE_COLOR_MAP
    float4 colorMap = SampleTexture(VFX_SAMPLER(baseColorMap),uvData);
    #if HDRP_USE_BASE_COLOR_MAP_COLOR
    color.xyz *= colorMap.xyz;
    #endif
    #if HDRP_USE_BASE_COLOR_MAP_ALPHA
    color.a *= colorMap.a;
    #endif
    #endif
	color.a *= fadeFactor;
    VFXClipFragmentColor(color.a,i);
    surfaceData.baseColor.rgb = saturate(color.rgb);
	surfaceData.baseColor.a = color.a;

	float albedoMapBlend = surfaceData.baseColor.a;
	float maskMapBlend = fadeFactor;

    float metallic = 0.0f;
    float smoothness = 0.5f;
    float ao = 0.0f;
#ifdef VFX_VARYING_METALLIC
    metallic = i.VFX_VARYING_METALLIC;
#endif
#ifdef VFX_VARYING_SMOOTHNESS
    smoothness = i.VFX_VARYING_SMOOTHNESS;
#endif
#ifdef VFX_VARYING_AMBIENT_OCCLUSION
    ao = i.VFX_VARYING_AMBIENT_OCCLUSION;
#endif

#if HDRP_USE_MASK_MAP
    float4 mask = SampleTexture(VFX_SAMPLER(maskMap), uvData);
    mask.xyz *= float3(metallic, ao, smoothness);

	surfaceData.mask = mask;
	surfaceData.mask.z = surfaceData.mask.w;
	maskMapBlend = mask.z * fadeFactor;


#else //HDRP_USE_MASK_MAP
    surfaceData.mask.xyz = float3(metallic, ao, smoothness);
#endif

#if VFX_MASK_BLEND_BASE_COLOR_ALPHA
	surfaceData.mask.w = albedoMapBlend;
#elif VFX_MASK_BLEND_MASK_BLUE // TODO : Careful, not the only two cases, e.g. when using opacity
	surfaceData.mask.w = maskMapBlend;
#endif


	#if USE_NORMAL_MAP
	float3 normalTS = SampleNormalMap(VFX_SAMPLER(normalMap),uvData);
	#else
	float3 normalTS = float3(0.0f,0.0f,1.0f);
	#endif
	normalWS = normalize(mul(transpose(worldToElement), normalTS));

	surfaceData.normalWS.xyz = normalWS;
	#if VFX_NORMAL_BLEND_BASE_COLOR_ALPHA
	surfaceData.normalWS.w = albedoMapBlend;
	#elif VFX_NORMAL_BLEND_MASK_BLUE // TODO : Careful, not the only two cases, e.g. when using opacity	surfaceData.mask.w = maskMapBlend;
	surfaceData.normalWS.w = maskMapBlend;
	#endif

	surfaceData.MAOSBlend.xy = float2(surfaceData.mask.w, surfaceData.mask.w);
	#endif
	#if SHADERPASS == SHADERPASS_VFX_DECAL_FORWARD_EMISSIVE
		#if defined(VFX_VARYING_EMISSIVE)
		surfaceData.emissive = i.VFX_VARYING_EMISSIVE * fadeFactor;
		#endif
		#ifdef HDRP_USE_EMISSIVE_MAP
		float emissiveScale = 1.0f;
		#ifdef VFX_VARYING_EMISSIVESCALE
		emissiveScale = i.VFX_VARYING_EMISSIVESCALE;
		#endif
		surfaceData.emissive *= SampleTexture(VFX_SAMPLER(emissiveMap), uvData).rgb * emissiveScale;
		#endif
		// Inverse pre-expose using exposureWeight weight
		float3 emissiveRcpExposure = surfaceData.emissive * GetInverseCurrentExposureMultiplier();
		#ifdef VFX_VARYING_EXPOSUREWEIGHT
		surfaceData.emissive = lerp(emissiveRcpExposure, surfaceData.emissive, i.VFX_VARYING_EXPOSUREWEIGHT);
		#elif VFX_BYPASS_EXPOSURE
		surfaceData.emissive = lerp(emissiveRcpExposure, surfaceData.emissive, 0.0f);
		#else
		surfaceData.emissive = lerp(emissiveRcpExposure, surfaceData.emissive, 1.0f);
		#endif
	#endif
}

