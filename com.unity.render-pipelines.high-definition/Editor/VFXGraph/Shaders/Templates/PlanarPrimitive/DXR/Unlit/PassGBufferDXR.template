
        Pass
        {
            Name "GBufferDXR"
            Tags{ "LightMode" = "GBufferDXR" }

            HLSLPROGRAM
            #pragma target 4.5
            #pragma only_renderers d3d11 ps5
            #pragma raytracing surface_shader
            #pragma multi_compile _ MINIMAL_GBUFFER
            #pragma multi_compile PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2

            // Global includes
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

            // Define the shader pass
            #define SHADERPASS SHADERPASS_RAYTRACING_GBUFFER

            // Need to override the macros for ray tracing
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"

            // Shader variables
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Deferred/RaytracingIntersectonGBuffer.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/StandardLit/StandardLit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Common/AtmosphericScatteringRayTracing.hlsl"

            // VFX includes
            ${VFXIncludeRP("Templates/PlanarPrimitive/DXR/Common/RayTracingInputStructure.template")}
            ${VFXPerPassInclude}

            // Needs to be included after the VFX includes
            ${VFXIncludeRP("Templates/PlanarPrimitive/DXR/Unlit/IntersectionFunctions.template")}

            // Lighting and material includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Common/RayTracingProcedural.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"

            // Defines for the attributes
            ${VFXIncludeRP("VFXLitVaryings.template")}

            // Graph functions
            ${VFXGeneratedBlockFunction}

            [shader("closesthit")]
            void ClosestHit(inout RayIntersectionGBuffer rayIntersectionGbuffer : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
            {
                UNITY_XR_ASSIGN_VIEW_INDEX(DispatchRaysIndex().z);

                // Compute the distance of the ray
                rayIntersectionGbuffer.t = RayTCurrent();

                // Evaluate the view direction
                float3 viewWS = -WorldRayDirection();

                // Evaluate the position
                float3 positionRWS = WorldRayOrigin() + rayIntersectionGbuffer.t * WorldRayDirection();

                // Evaluate the position input
                PositionInputs posInput = GetPositionInput(0, _ScreenSize.zw, positionRWS);

                // Index needs to be available in the context for the attribute load to work
                ${VFXGetIndexFromRTPrimitiveIndex}

                // Attributes of the paticle
                VFXAttributes attributes;
                ZERO_INITIALIZE(VFXAttributes, attributes);

                // Load the VFX attributes that we need for this
                ${VFXLoadAttributes}
                ${VFXProcessBlocks}
                ${VFXLoadSize}

                // First we pack the data into the standard bsdf data
                StandardBSDFData standardLitData;
                ZERO_INITIALIZE(StandardBSDFData, standardLitData);

                // Output is not to be lit
                // The inverse current exposure multiplier needs to only be applied to the color as it need to be brought to the current exposure value, the emissive
                // color is already in the right exposure space.
                standardLitData.emissiveAndBaked = SampleTexture(VFX_SAMPLER(mainTexture), attributeData.barycentrics) * attributes.color.xyz * GetInverseCurrentExposureMultiplier();
                standardLitData.isUnlit = 1;

                // Be cause this will not be lit, we need to apply atmospheric scattering right away
                ApplyFogAttenuation(WorldRayOrigin(), WorldRayDirection(), RayTCurrent(), standardLitData.emissiveAndBaked, true);

                // Then export it to the gbuffer
                EncodeIntoStandardGBuffer(standardLitData, rayIntersectionGbuffer.gbuffer0, rayIntersectionGbuffer.gbuffer1, rayIntersectionGbuffer.gbuffer2, rayIntersectionGbuffer.gbuffer3);
                rayIntersectionGbuffer.t = RAY_TRACING_DISTANCE_FLAG_UNLIT;
            }

            // Inject the intersection shader
            ${VFXIncludeRP("Templates/PlanarPrimitive/DXR/Common/IntersectionShader.template")}
            ENDHLSL
        }
