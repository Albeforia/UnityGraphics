#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
//#pragma enable_d3d11_debug_symbols

#pragma kernel Main

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/CapsuleShadows/Shaders/CapsuleShadowsUpscale.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/CapsuleShadows/ShaderVariablesCapsuleShadows.cs.hlsl"

TEXTURE2D_ARRAY(_CapsuleShadowsRenderOutput);
RW_TEXTURE2D_ARRAY(float, _CapsuleShadowsTexture);

[numthreads(8,8,1)]
void Main(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint2 pixelCoord = dispatchThreadId.xy;
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    float2 positionSS = float2(pixelCoord) + .5f;
    float targetLinearDepth = LinearEyeDepth(LOAD_TEXTURE2D_X(_CameraDepthTexture, pixelCoord).x, _ZBufferParams);

    float4 weights = GetCapsuleShadowsUpscaleWeights(
        positionSS,
        targetLinearDepth,
        float2(_FirstDepthMipOffset),
        _DepthPyramidTextureSize.zw,
        _CapsuleUpscaledSize.zw);

    float2 renderUV = positionSS*0.5f*_CapsuleRenderTextureSize.zw;
    for (uint casterIndex = 0; casterIndex < _CapsuleCasterCount; ++casterIndex)
    {
        float4 gatherR = GATHER_TEXTURE2D_ARRAY(_CapsuleShadowsRenderOutput, s_linear_clamp_sampler, renderUV, casterIndex);
        float upscaledR = dot(weights, gatherR);
        //float upscaledR = SAMPLE_TEXTURE2D_ARRAY_LOD(_CapsuleShadowsRenderOutput, s_linear_clamp_sampler, renderUV, casterIndex, 0.f);
        _CapsuleShadowsTexture[uint3(pixelCoord, casterIndex)] = upscaledR;
    }
}
