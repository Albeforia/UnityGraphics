//
// This is a modified version of the SSAO renderer from Microsoft's MiniEngine
// library. The copyright notice from the original version is included below.
//
// The original source code of MiniEngine is available on GitHub.
// https://github.com/Microsoft/DirectX-Graphics-Samples
//

//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// Developed by Minigraph
//
// Author:  James Stanard
//

#pragma warning(disable : 3568)
#pragma exclude_renderers gles gles3 d3d11_9x

#pragma kernel MultiScaleVODownsample2              main=MultiScaleVODownsample2
#pragma kernel MultiScaleVODownsample2_MSAA         main=MultiScaleVODownsample2_MSAA       MSAA

#include "Packages/com.unity.postprocessing/PostProcessing/Shaders/StdLib.hlsl"

#ifdef MSAA
Texture2D<float4> DS4x;
RWTexture2D<float4> DS8x;
RWTexture2DArray<float4> DS8xAtlas;
#else
Texture2D<half4> DS4x;
RWTexture2D<half4> DS8x;
RWTexture2DArray<half4> DS8xAtlas;
#endif


#ifdef DISABLE_COMPUTE_SHADERS

TRIVIAL_COMPUTE_KERNEL(main)

#else

[numthreads(8, 8, 1)]
void main(uint3 Gid : SV_GroupID, uint GI : SV_GroupIndex, uint3 GTid : SV_GroupThreadID, uint3 DTid : SV_DispatchThreadID)
{
    #ifdef MSAA
    float2 m1 = DS4x[DTid.xy << 1].zw;
    #else
    float m1 = DS4x[DTid.xy << 1].y;
    #endif

    uint2 st = DTid.xy;
    uint2 stAtlas = st >> 2;
    uint stSlice = ((st.x & 3) | (st.y << 2)) & 15;

    #ifdef MSAA
    DS8x[st] = float4(m1.x, m1.y, 0.0, 0.0);
    DS8xAtlas[uint3(stAtlas, stSlice)] = float4(m1.x, m1.y, 0.0, 0.0);
    #else
    DS8x[st] = float4(m1, 0.0, 0.0, 0.0);
    DS8xAtlas[uint3(stAtlas, stSlice)] = float4(m1, 0.0, 0.0, 0.0);
    #endif

    if ((GI & 011) == 0)
    {
        uint2 st = DTid.xy >> 1;
        uint2 stAtlas = st >> 2;
        uint stSlice = ((st.x & 3) | (st.y << 2)) & 15;

        #ifdef MSAA
        DS8x[st] = float4(m1.x, m1.y, m1.x, m1.y);
        DS8xAtlas[uint3(stAtlas, stSlice)] = float4(m1.x, m1.y, m1.x, m1.y);
        #else
        DS8x[st] = float4(m1, m1, 0.0, 0.0);
        DS8xAtlas[uint3(stAtlas, stSlice)] = float4(m1, m1, 0.0, 0.0);
        #endif
    }
}

#endif // DISABLE_COMPUTE_SHADERS
