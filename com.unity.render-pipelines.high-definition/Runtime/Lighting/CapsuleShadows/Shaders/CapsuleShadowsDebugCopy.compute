#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
//#pragma enable_d3d11_debug_symbols

#pragma kernel Main

#include "Packages/com.unity.render-pipelines.core/Runtime/Lighting/CapsuleShadows/CapsuleShadowsCommon.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/CapsuleShadows/ShaderVariablesCapsuleShadows.cs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/CapsuleShadows/Shaders/CapsuleShadowsGlobals.hlsl"

TEXTURE2D_ARRAY(_CapsuleShadowsVisibility);
TEXTURE2D_X_UINT(_CapsuleShadowsTileBits);
RW_TEXTURE2D_X(float, _CapsuleShadowsDebugOutput);

[numthreads(8,8,1)]
void Main(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint2 pixelCoord = dispatchThreadId.xy;
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    uint2 tileCoord = pixelCoord/8;
    uint tileBits = LOAD_TEXTURE2D_X(_CapsuleShadowsTileBits, tileCoord);

    float packedVisibility;
    if ((tileBits & (1U << _CapsuleDebugCasterIndex)) != 0)
        packedVisibility = LOAD_TEXTURE2D_ARRAY(_CapsuleShadowsVisibility, pixelCoord, INDEX_TEXTURE2D_ARRAY_X(_CapsuleDebugCasterIndex)).x;
    else
        packedVisibility = PackCapsuleVisibility(((pixelCoord.x ^ pixelCoord.y) & 8) != 0 ? 0.8f : 0.7f);

    _CapsuleShadowsDebugOutput[COORD_TEXTURE2D_X(pixelCoord)] = packedVisibility;
}
