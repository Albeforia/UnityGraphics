#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/UberPostFeatures.cs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/BloomCommon.hlsl"

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#pragma kernel Uber

#pragma multi_compile _ AUTOLENSFLARE
#pragma multi_compile _ CHROMATIC_ABERRATION
#pragma multi_compile _ VIGNETTE
#pragma multi_compile _ LENS_DISTORTION
#pragma multi_compile _ ENABLE_ALPHA
#pragma multi_compile _ GAMMA2_OUTPUT
#pragma multi_compile_local _ HDR_OUTPUT_REC2020 HDR_OUTPUT_SCRGB

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/PostProcessDefines.hlsl"
#if defined(HDR_OUTPUT_REC2020) || defined(HDR_OUTPUT_SCRGB)
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/HDROutput.hlsl"
#endif

TEXTURE2D_X(_InputTexture);
TEXTURE2D_X(_BloomTexture);
TEXTURE2D(_BloomDirtTexture);
TEXTURE2D(_ChromaSpectralLut);
TEXTURE3D(_LogLut3D);
TEXTURE2D(_VignetteMask);

RW_TEXTURE2D_X(CTYPE, _OutputTexture);

SAMPLER(sampler_LinearClamp);
SAMPLER(sampler_ChromaSpectralLut);
SAMPLER(sampler_LogLut3D);
SAMPLER(sampler_VignetteMask);

CBUFFER_START(cb0)
    float4 _AutoLensFlareParams;
    float4 _AutoLensFlareParams2;
    float4 _AutoLensFlareParams3;
    float4 _ChromaParams;
    float4 _VignetteParams1;
    float4 _VignetteParams2;
    float4 _VignetteColor;
    float4 _DistortionParams1;
    float4 _DistortionParams2;
    float4 _LogLut3D_Params;        // x: 1 / lut_size, y: lut_size - 1, z: postexposure, w: unused
    float4 _BloomParams;
    float4 _BloomThreshold;
    float4 _BloomTint;
    float4 _BloomDirtScaleOffset;
    float4 _BloomBicubicParams;
    float4 _DebugFlags;
    float4 _AlphaScaleBias;
CBUFFER_END

#define DistCenter              _DistortionParams1.xy
#define DistAxis                _DistortionParams1.zw
#define DistTheta               _DistortionParams2.x
#define DistSigma               _DistortionParams2.y
#define DistScale               _DistortionParams2.z
#define DistIntensity           _DistortionParams2.w

#define AutoLensFlareAmount     _AutoLensFlareParams.x
#define AutoLensFlareBlurSize   _AutoLensFlareParams.y
#define AutoLensFlareBlurSample _AutoLensFlareParams.z
#define AutoLensFlareBlurContribution   _AutoLensFlareParams.w

#define ChromaticAbberationIntensity        _AutoLensFlareParams2.x
#define ChromaticAbberationSample           _AutoLensFlareParams2.y
#define ChromaticAbberationContribution     _AutoLensFlareParams2.z

#define AutoLensFlareFirstIntensity         _AutoLensFlareParams3.x
#define AutoLensFlareSecondaryIntensity     _AutoLensFlareParams3.y
#define AutoLensFlarePolarIntensity         _AutoLensFlareParams3.z
#define AutoLensFlareVignetteInfluence      _AutoLensFlareParams3.w



#define ChromaAmount            _ChromaParams.x
#define ChromaMaxSamples        int(_ChromaParams.y)

#define VignetteCenter          _VignetteParams1.xy
#define VignetteMode            uint(_VignetteParams1.z)
#define VignetteIntensity       _VignetteParams2.x
#define VignetteSmoothness      _VignetteParams2.y
#define VignetteRoundness       _VignetteParams2.z
#define VignetteRounded         _VignetteParams2.w
#define VignetteColor           _VignetteColor.xyz
#define VignetteOpacity         _VignetteColor.w

#define PostExposure            _LogLut3D_Params.z

#define BloomTint               _BloomTint.xyz
#define BloomIntensity          _BloomParams.x
#define DirtIntensity           _BloomParams.y
#define BloomEnabled            _BloomParams.z
#define DirtEnabled             _BloomParams.w
#define DirtScale               _BloomDirtScaleOffset.xy
#define DirtOffset              _BloomDirtScaleOffset.zw

#define OutputLogEnabled        _DebugFlags.x

#define AlphaScale              _AlphaScaleBias.x
#define AlphaBias               _AlphaScaleBias.y

float2 DistortUV(float2 uv)
{
    // Lens distortion
    // Note: this variant should never be set with XR
#ifdef LENS_DISTORTION
    uv = (uv - 0.5) * DistScale + 0.5;
    float2 ruv = DistAxis * (uv - 0.5 - DistCenter);
    float ru = length(float2(ruv));

    UNITY_BRANCH
    if (DistIntensity > 0.0)
    {
        float wu = ru * DistTheta;
        ru = tan(wu) * (rcp(ru * DistSigma));
        uv = uv + ruv * (ru - 1.0);
    }
    else
    {
        ru = rcp(ru) * DistTheta * atan(ru * DistSigma);
        uv = uv + ruv * (ru - 1.0);
    }
#endif

    return uv;
}

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

float2 scaleUV(float2 uv, float2 center, float scale, bool invert, bool logistic, bool polar)
{

    if(polar){

        scale = 1/scale;
        uv = float2(map(uv.x, 0,1,-1*scale,1*scale), map(uv.y, 0,1,-1*scale,1*scale));


        float x = sqrt(pow(uv.x,2) + pow(uv.y, 2));
        float x1 = map(x, 0,1.414,0,1);
        float y = atan2(uv.x,-uv.y);
        float y1 = map(y, -3.14, 3.14 , 0, 1);

        return float2(1-y1,invert ? (1-x1) : x1); //Can be removed
    }

    if(logistic)
    {
        float k = 3.0 + (1/(scale));
        k = invert ? k : -k;
        uv.x = 1/(1 + exp(k*(uv.x - center.x)));
        uv.y = 1/(1+exp(k*(uv.y - center.y)));

        return uv;

    }
    else
    {

        uv.x -= center.x;
        uv.y -= center.y;

        uv.x *= (1.0f/(scale));
        uv.y *= (1.0f/(scale));

        uv.x += center.x;
        uv.y += center.y;

        if(invert){
            uv.x = 1-uv.x;
            uv.y = 1-uv.y;
        }

        return uv;
    }
}

float3 GetFlareTexture(float2 uv, float scale, float intensity, bool invert, bool polar){

    float chromaIntensityDampen = 0.05f;            //0 and 1 max

    float chromaAmount = ChromaticAbberationIntensity;          //0 and 1 max
    float chromSampleCount = ChromaticAbberationSample;

    float blurSize = AutoLensFlareBlurSize; // 0 /8
    float blurSampleCount = AutoLensFlareBlurSample;        // 3 and 16 max

    uv = DistortUV(uv);

    //Chromatic
    float2 coords = 2.0 * uv - 1.0;
    float2 end = uv - coords * dot(coords, coords) * chromaAmount;  //Amount
    float2 diff = end - uv;
    int samples = clamp(int(length(_PostProcessScreenSize.xy * diff / 2.0)), 3, chromSampleCount); //max sample
    float2 delta = diff / samples;
    float2 pos = uv;

    pos = scaleUV(uv, float2(0.5,0.5), scale, invert, polar, polar);

    float3 sum = 0.0, filterSum = 0.0;

    for (int i = 0; i < samples; i++)
    {
        float sign = invert ? -1 : 1;
        float t = (i + 0.5) / samples;
        float3 s = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinearPostProcessTexture(DistortUV(pos)), 0.0).xyz;
        float3 filter = SAMPLE_TEXTURE2D_LOD(_ChromaSpectralLut, sampler_ChromaSpectralLut, float2(invert ? 1-t : t, 0.0), 0).xyz;

        sum += (s * filter ) * ((samples-(i+0.5))/samples);
        filterSum += filter;
        pos += delta;
    }

    //Debug
    float3 chromaTexture = chromaIntensityDampen * (sum / filterSum);

    float2 uv1 = scaleUV(uv, float2(0.5f,0.5f), scale, invert, polar, polar);

    float3 blurTexture = float3(0,0,0);


    for(float x = -blurSampleCount; x <= blurSampleCount; x++){
        if(abs(x) >= 1){
            float2 uv2 = uv1 + float2((x/_PostProcessScreenSize.x) * blurSize/blurSampleCount, 0);
            blurTexture +=  SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinearPostProcessTexture(uv2), 0.0).xyz;
        }
    }

    for(float y = -blurSampleCount; y <= blurSampleCount; y++){
        if(abs(y) >= 1){
            float2 uv2 = uv1 + float2(0, (y/_PostProcessScreenSize.y) * blurSize/blurSampleCount);
            blurTexture += SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinearPostProcessTexture(uv2), 0.0).xyz;
        }
    }

    // Intensity threshold
    blurTexture /= 100 * ((blurSampleCount*4) - 2); // Bad way to make a threshold



    //Combine
    // return lerp(float3(0,0,0), ca.xyz, mask.xyz) * intensity;

    return (
                blurTexture.xyz * AutoLensFlareBlurContribution
                +  pow(chromaTexture.xyz,1) * ChromaticAbberationContribution
            ) * intensity;
    // return pow(ca.xyz,1) * intensity;
    // return ca.xyz * mask.xyz * intensity;
}

#define GROUP_SIZE 8

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void Uber(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), _PostProcessScreenSize.zw, uint2(GROUP_SIZE, GROUP_SIZE));
    float2 uv = posInputs.positionNDC;
    float2 uvDistorted = DistortUV(uv);
    CTYPE color = 0.0;
    CTYPE inputColor = 0.0;



    // Chromatic aberration
    // Inspired by the method described in "Rendering Inside" [Playdead 2016]
    // https://twitter.com/pixelmager/status/717019757766123520
    /*
#ifdef CHROMATIC_ABERRATION
    float2 coords = 2.0 * uv - 1.0;
    float2 end = uv - coords * dot(coords, coords) * ChromaAmount;
    float2 diff = end - uv;
    int samples = clamp(int(length(_PostProcessScreenSize.xy * diff / 2.0)), 3, ChromaMaxSamples);
    float2 delta = diff / samples;
    float2 pos = uv;
    float3 sum = 0.0, filterSum = 0.0;

    for (int i = 0; i < samples; i++)
    {
        float t = (i + 0.5) / samples;
        float3 s = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinearPostProcessTexture(DistortUV(pos)), 0.0).xyz;
        float3 filter = SAMPLE_TEXTURE2D_LOD(_ChromaSpectralLut, sampler_ChromaSpectralLut, float2(t, 0.0), 0).xyz;

        sum += s * filter;
        filterSum += filter;
        pos += delta;
    }

    color.xyz = sum / filterSum;
#ifdef ENABLE_ALPHA
    inputColor = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinearPostProcessTexture(uvDistorted), 0.0);
    color.w = inputColor.w;
#endif

#else
    color = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinearPostProcessTexture(uvDistorted), 0.0).CTYPE_SWIZZLE;
    inputColor = color;
#endif
*/

    color = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinearPostProcessTexture(uvDistorted), 0.0).CTYPE_SWIZZLE;
    inputColor = color;

    // Bloom
    UNITY_BRANCH
    if (BloomEnabled)
    {
        #if 0 // Bilinear
        float3 bloom = SAMPLE_TEXTURE2D_X_LOD(_BloomTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(uvDistorted), 0.0).xyz;
        #else
        float3 bloom = SampleTexture2DBicubic(TEXTURE2D_X_ARGS(_BloomTexture, sampler_LinearClamp), uvDistorted * _RTHandlePostProcessScale.xy, _BloomBicubicParams, _RTHandlePostProcessScale.xy, unity_StereoEyeIndex).xyz;
        #endif

        float3 thresholdedColor = QuadraticThreshold(color.xyz, _BloomThreshold.x, _BloomThreshold.yzw);
        color.xyz = lerp(color.xyz, (color.xyz - thresholdedColor) + (bloom * BloomTint), BloomIntensity);

        UNITY_BRANCH
        if (DirtEnabled)
        {
            // UVs for the dirt texture should be DistortUV(uv * DirtScale + DirtOffset) but
            // considering we use a cover-style scale on the dirt texture the difference isn't massive
            // so we chose to save a few ALUs here instead in case lens distortion is active
            float3 dirt = SAMPLE_TEXTURE2D_LOD(_BloomDirtTexture, sampler_LinearClamp, uvDistorted * DirtScale + DirtOffset, 0.0).xyz;
            color.xyz += bloom * dirt * DirtIntensity;
        }

#ifdef ENABLE_ALPHA
        // Bloom should also spread in areas with zero alpha, so we save the image with bloom here to do the mixing at the end of the shader
        inputColor.xyz = color.xyz;
#endif
    }

    // Vignette
#ifdef VIGNETTE

    UNITY_BRANCH
    if (VignetteMode == 0u) // Procedural
    {
        float2 d = abs(uvDistorted - VignetteCenter) * VignetteIntensity;
        d.x *= lerp(1.0, _PostProcessScreenSize.x / _PostProcessScreenSize.y, VignetteRounded);
        d = pow(saturate(d), VignetteRoundness);
        float vfactor = pow(saturate(1.0 - dot(d, d)), VignetteSmoothness);
        color.xyz *= lerp(VignetteColor, (1.0).xxx, vfactor);
    }
    else // Masked
    {
        float vfactor = SAMPLE_TEXTURE2D_LOD(_VignetteMask, sampler_VignetteMask, uvDistorted, 0).w;
        vfactor = FastSRGBToLinear(vfactor);
        float3 newColor = color.xyz * lerp(VignetteColor, (1.0).xxx, vfactor);
        color.xyz = lerp(color.xyz, newColor, VignetteOpacity);
    }

#endif

#ifdef AUTOLENSFLARE

//Parameters
// float sampleScale = 1.0f;
// float chromaAmount = 0.075f;         //0 and 1 max
// float chromSample = 1;
float vignettePow = 2.0;
float vignetteScale = 2.0f;         //Scale Multiplier  // 1.0 is great too
float vignetteSquaredness = 2.0f;   //1.0 means star, 2.0 circle, above more squared

/*Vignette*/
    float2 uvVignette = scaleUV(uv, float2(0.5,0.5), vignetteScale, false, false, false);
    float vignetteX = (pow(abs(2 * uvVignette.x - 1) , vignetteSquaredness));
    float vignetteY = (pow(abs(2 * uvVignette.y - 1) , vignetteSquaredness));
    float vignetteRound = (pow((vignetteX + vignetteY), vignettePow));
    // float vignetteStar = (pow((vignetteX * vignetteY), vignettePow/4));
    // float vignette = vignetteRound;
    // float vignette = vignetteStar;

    vignetteRound = lerp(1,vignetteRound,AutoLensFlareVignetteInfluence);

    float3 classicInv = GetFlareTexture(uv, 4.0f,AutoLensFlareFirstIntensity, true, false);
    float3 classic = GetFlareTexture(uv, 4.0f,AutoLensFlareSecondaryIntensity, false, false);

    float3 polar = GetFlareTexture(uv, 1.0f,AutoLensFlarePolarIntensity, false, true);
    float3 polarInv = GetFlareTexture(uv, 1.0f,AutoLensFlarePolarIntensity, true, true);

    float3 classic2Inv = GetFlareTexture(uv, 2.0f,AutoLensFlareFirstIntensity, true, false);
    float3 classic2 = GetFlareTexture(uv, 2.0f,AutoLensFlareSecondaryIntensity, false, false);

    float3 classic1Inv = GetFlareTexture(uv, 1.0f,AutoLensFlareFirstIntensity, true, false);
    float3 classic1 = GetFlareTexture(uv, 1.0f,AutoLensFlareSecondaryIntensity, false, false);

    float3 final = (
                        (classicInv + classic) * vignetteRound +
                        (classic2Inv + classic2) * vignetteRound +
                        (classic1Inv + classic1) * vignetteRound +
                        (polarInv + polar) * vignetteX*(vignetteX + vignetteY)

                        ) * AutoLensFlareAmount;

    color = float4(color.xyz + final.xyz, 1);

    // color = final;
    // color = vignetteRound;
    // color = GetFlareTexture(uv, 1.1f,AutoLensFlareFirstIntensity, false, false);;
    // color = GetFlareTexture(uv, 1.1f,AutoLensFlareFirstIntensity, true, false);;
    // color = (classicInv + classic) + (classic2Inv + classic2) + (classic1Inv + classic1);
    // color = ((classicInv + classic) + (classic2Inv + classic2) + (classic1Inv + classic1) +  (polarInv + polar));
    // color = AutoLensFlareAmount * ((classicInv + classic) + (classic2Inv + classic2) + (classic1Inv + classic1) +(polarInv + polar));
    // color = vignetteRound;
    // color = final;

    // color += final;

    /*Debug*/
    // color = ca;
    // color = mask;
    // color = (mask) * (ca);
    // color = vignette;

    /*TODO*/
    // Mask don't really coincide with what I want
    // UVScale should scale more and more as we go in outercoordinate
    // Make everything parametrable
    // Make Other effect work again

#endif

    // Grading, tonemapping
    // The branch is only used for frame settings & exr log export - else grading is always enabled
    UNITY_BRANCH
    if (OutputLogEnabled)
    {
        // Output in log space for debug & exr export (external grading)
        color.xyz = saturate(LinearToLogC(color.xyz));
    }
    else
    {
        // Artist request to fine tune exposure in post without affecting bloom, dof etc
        color.xyz *= PostExposure;

        // Move from linear to LogC
        float3 colorLutSpace = saturate(LinearToLogC(color.xyz));

#ifndef HDR_OUTPUT
        // Color lookup in the LogC lut
        color.xyz = ApplyLut3D(TEXTURE3D_ARGS(_LogLut3D, sampler_LogLut3D), colorLutSpace, _LogLut3D_Params.xy);
#else
        // We use the Gran Turismo Approx which has a somewhat small error vs accurate https://www.desmos.com/calculator/5jdfc4pgtk
        // TODO: Evaluate whether we should use accurate version as it is not *that* more expensive. Also, consider using Patry if max nits is below 1400
        // We multiply by 100 as in lut space 1 = 100 nits.
        colorLutSpace = LinearToPQForLUT(color.xyz * 100.0f);
        color.xyz = ApplyLut3D(TEXTURE3D_ARGS(_LogLut3D, sampler_LogLut3D), colorLutSpace, _LogLut3D_Params.xy);
#endif
    }

    // Alpha mask
#ifdef ENABLE_ALPHA
        // Post processing is not applied on pixels with zero alpha
        // The alpha scale and bias control how steep is the transition between the post-processed and plain regions
        float alpha = inputColor.a * AlphaScale + AlphaBias;
        // Saturate is necessary to avoid issues when additive blending pushes the alpha over 1.
        color.xyz = lerp(inputColor.xyz, color.xyz, saturate(alpha));
#endif

#ifdef GAMMA2_OUTPUT
    color.xyz = sqrt(color.xyz);
#endif

    // Done
    _OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = color;
}
