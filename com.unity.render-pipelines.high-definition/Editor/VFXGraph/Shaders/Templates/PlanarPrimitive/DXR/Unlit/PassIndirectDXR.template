
        Pass
        {
            Name "IndirectDXR"
            Tags{ "LightMode" = "IndirectDXR" }

            HLSLPROGRAM
            #pragma target 4.5
            #pragma only_renderers d3d11 ps5
            #pragma raytracing surface_shader

            // Global includes
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

            // Define the shader pass
            #define SHADERPASS SHADERPASS_RAYTRACING_INDIRECT

            // Need to override the macros for ray tracing
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"

            // Shader variables ray tracing
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"

            // VFX includes
            ${VFXIncludeRP("Templates/PlanarPrimitive/DXR/Common/RayTracingInputStructure.template")}
            ${VFXPerPassInclude}

            // Needs to be included after the VFX includes
            ${VFXIncludeRP("Templates/PlanarPrimitive/DXR/Unlit/IntersectionFunctions.template")}

            // Material includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Common/RayTracingProcedural.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Common/AtmosphericScatteringRayTracing.hlsl"

            // Defines for the attributes
            ${VFXIncludeRP("VFXLitVaryings.template")}

            // Graph functions
            ${VFXGeneratedBlockFunction}

            [shader("closesthit")]
            void ClosestHit(inout RayIntersection rayIntersection : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
            {
                UNITY_XR_ASSIGN_VIEW_INDEX(DispatchRaysIndex().z);

                VFXAttributes attributes;
                ZERO_INITIALIZE(VFXAttributes, attributes);

                // Compute the distance of the ray
                rayIntersection.t = RayTCurrent();

                // Index needs to be available in the context for the attribute load to work
                ${VFXGetIndexFromRTPrimitiveIndex}

                // Load the VFX attributes that we need for this
                ${VFXLoadAttributes}
                ${VFXProcessBlocks}

                // Given that we will be multiplying the final color by the current exposure multiplier outside of this function, we need to make sure that
                // the unlit color is not impacted by that. Thus, we multiply it by the inverse of the current exposure multiplier.
                rayIntersection.color = SampleTexture(VFX_SAMPLER(mainTexture), attributeData.barycentrics) * attributes.color.xyz * GetInverseCurrentExposureMultiplier();

                // Apply fog attenuation
                ApplyFogAttenuation(WorldRayOrigin(), WorldRayDirection(), rayIntersection.t, rayIntersection.color, true);
            }

            // Inject the intersection shader
            ${VFXIncludeRP("Templates/PlanarPrimitive/DXR/Common/IntersectionShader.template")}
            ENDHLSL
        }
