Pass
{		
	Name "DecalMeshForwardEmissive"
	Tags {"LightMode"="DecalMeshForwardEmissive"}


    ZWrite Off
    ZTest LEqual

    Blend 0 SrcAlpha One

    // ColorMask [_DecalColorMask0]
    // ColorMask [_DecalColorMask1] 1
    // ColorMask [_DecalColorMask2] 2
    // ColorMask [_DecalColorMask3] 3
		
	HLSLPROGRAM
	#pragma target 4.5
	#pragma multi_compile _ LIGHT_LAYERS
	#pragma multi_compile _ DEBUG_DISPLAY
	
	#define UNITY_MATERIAL_LIT
		
	${VFXIncludeRP("VFXLitVaryings.template")}		
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/Decal.hlsl"
	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"



	struct ps_input
	{
		float4 pos : SV_POSITION;
		
		${VFXHDRPLitDeclareVaryings}
		
		float2 uv : TEXCOORD1;
		float3 posWS : TEXCOORD2;
		float4 sphereInfo : TEXCOORD3;

		nointerpolation float4 viewToDecal0 : TEXCOORD4;
		nointerpolation float4 viewToDecal1 : TEXCOORD5;
		nointerpolation float4 viewToDecal2 : TEXCOORD6;

		UNITY_VERTEX_OUTPUT_STEREO
	};
	
	${VFXHDRPLitVaryingsMacros}	
		
	#define VFX_VARYING_PS_INPUTS ps_input
	#define VFX_VARYING_POSCS pos
	#define VFX_VARYING_UV uv
	#define VFX_VARYING_POSWS posWS	

	${VFXBegin:VFXVertexAdditionalProcess}
	float4x4 viewToDecal = GetVFXToElementMatrix(
		attributes.axisX,
		attributes.axisY,
		attributes.axisZ,
		float3(attributes.angleX,attributes.angleY,attributes.angleZ),
		float3(attributes.pivotX,attributes.pivotY,attributes.pivotZ),
		size3,
		attributes.position);
		
	#if VFX_LOCAL_SPACE
	viewToDecal = mul(viewToDecal, VFXGetWorldToObjectMatrix());
	#endif
	viewToDecal = mul(viewToDecal, VFXGetViewToWorldMatrix());
	o.viewToDecal0 = viewToDecal[0];
	o.viewToDecal1 = viewToDecal[1];
	o.viewToDecal2 = viewToDecal[2];

	${VFXHDRPLitFillVaryings}
	${VFXEnd}

	
//TODO : Vertex shader of decal must perform z bias or view bias (BiasType), need to create one
${VFXInclude("Shaders/ParticleHexahedron/Pass.template")}	
#define SHADERPASS SHADERPASS_VFX_DECAL_FORWARD_EMISSIVE
${VFXIncludeRP("VFXDecal.template")}




//EndTODO
					
	#pragma fragment frag
	void frag(ps_input i, out float4 outEmissive : SV_Target0)
	{
		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
		float3 normalWS = float3(0,1,0); //TODO : useless
		DecalSurfaceData surfaceData; 
    	ZERO_INITIALIZE(DecalSurfaceData, surfaceData); 
		VFXGetSurfaceDecalData(surfaceData,i,normalWS);
		outEmissive.rgb = surfaceData.emissive;
		outEmissive.a = 1.0f;
	}
	ENDHLSL
}
