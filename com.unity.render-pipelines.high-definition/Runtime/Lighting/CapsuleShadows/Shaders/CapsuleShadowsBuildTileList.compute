#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
//#pragma enable_d3d11_debug_symbols

#pragma kernel Main

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/CapsuleShadows/Shaders/CapsuleShadowsUpscale.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/CapsuleShadows/ShaderVariablesCapsuleShadows.cs.hlsl"

RW_TEXTURE2D_X(uint, _CapsuleShadowsTileBitsOutput);
TEXTURE2D_X_UINT(_CapsuleShadowsTileBits);
RWStructuredBuffer<uint> _CapsuleShadowsIndirectArgs;
RWStructuredBuffer<CapsuleShadowsUpscaleTile> _CapsuleShadowsTileList;

#define _CapsuleRenderSizeInTiles uint2(_CapsuleRenderSizeInTilesX, _CapsuleRenderSizeInTilesY)

[numthreads(8,8,1)]
void Main(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint2 tileCoord = dispatchThreadId.xy;
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // intentionally includes extra index equal to the render size
    if (any(tileCoord > _CapsuleRenderSizeInTiles))
        return;

    // TODO: use gather (can do gather on UINT portably?)
    uint tileBits = 0;
    for (uint i = 0; i < 4; ++i)
    {
        uint2 loadCoord = tileCoord - uint2(i & 1, i >> 1);
        if (all(loadCoord < _CapsuleRenderSizeInTiles))
            tileBits |= _CapsuleShadowsTileBits[COORD_TEXTURE2D_X(loadCoord)];
    }

    // add an list entry if we need to upscale this tile
    if (tileBits != 0)
    {
        uint writeIndex;
        InterlockedAdd(_CapsuleShadowsIndirectArgs[CAPSULE_SHADOW_INDIRECT_INDEX_TILE_COUNT], 1, writeIndex);
        _CapsuleShadowsTileList[writeIndex] = makeCapsuleShadowsUpscaleTile(tileCoord, tileBits);
    }

    // write tile bits for the output
    for (uint i = 0; i < 4; ++i)
    {
        uint2 storeCoord = 2*tileCoord + uint2(i & 1, i >> 1) - 1;
        if (all(storeCoord < 2*_CapsuleRenderSizeInTiles))
            _CapsuleShadowsTileBitsOutput[COORD_TEXTURE2D_X(storeCoord)] = tileBits;
    }
}
