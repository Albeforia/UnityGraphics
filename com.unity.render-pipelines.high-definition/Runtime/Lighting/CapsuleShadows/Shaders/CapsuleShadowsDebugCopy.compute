#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
//#pragma enable_d3d11_debug_symbols

#pragma kernel Main

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/CapsuleShadows/ShaderVariablesCapsuleShadows.cs.hlsl"
#include "Packages/com.unity.render-pipelines.core/Runtime/Lighting/CapsuleShadows/Shaders/CapsuleShadows.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/CapsuleShadows/Shaders/CapsuleShadowsGlobals.hlsl"

TEXTURE2D_ARRAY(_CapsuleShadowsVisibility);
TEXTURE2D_X_UINT(_CapsuleShadowsTileBits);
RW_TEXTURE2D_X(float, _CapsuleShadowsDebugOutput);

[numthreads(8,8,1)]
void Main(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint2 pixelCoord = dispatchThreadId.xy;
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    uint2 inputCoord = pixelCoord;
    if (_CapsuleDebugIsHalfResolution != 0)
        inputCoord /= 2;

    uint2 tileCoord = inputCoord/8;
    uint tileBits = LOAD_TEXTURE2D_X(_CapsuleShadowsTileBits, tileCoord);

    float packedVisibility = 0.f;
    if ((tileBits & (1U << _CapsuleDebugCasterIndex)) != 0)
        packedVisibility = _CapsuleShadowsVisibility[uint3(inputCoord, _CapsuleDebugCasterIndex)].x;

    _CapsuleShadowsDebugOutput[COORD_TEXTURE2D_X(pixelCoord)] = packedVisibility;
}
