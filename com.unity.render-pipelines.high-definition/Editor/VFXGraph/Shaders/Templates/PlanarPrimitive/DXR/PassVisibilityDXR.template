
        Pass
        {
            Name "VisibilityDXR"
            Tags{ "LightMode" = "VisibilityDXR" }

            HLSLPROGRAM
            #pragma target 4.5
            #pragma only_renderers d3d11 ps5
            #pragma raytracing surface_shader
            #pragma multi_compile _ MULTI_BOUNCE_INDIRECT

            // Global includes
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

            // Define the shader pass
            #define SHADERPASS SHADERPASS_RAYTRACING_VISIBILITY

            // Need to override the macros for ray tracing
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"

            // Shader variables
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
            
            // Equivalent of the Pixel to Vertex structure
            struct rt_input
            {
                float4 pos;
                ${VFXHDRPLitDeclareVaryings}
            };
            #define VFX_VARYING_PS_INPUTS rt_input
            #define VFX_VARYING_POSCS pos

            // VFX includes
            ${VFXPerPassInclude}
            
            // Needs to be includes just after the VFX includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXRayTracingCommon.hlsl"

            // Visibility function required for the intersection shader
            bool AABBPrimitiveIsVisible(RayTracingProceduralData rtProceduralData, float2 uv)
            {
                VFXAttributes attributes = rtProceduralData.attributes;
                ${VFXLoadParameter:{alphaThreshold}}
                return SampleTexture(VFX_SAMPLER(mainTexture), uv).a > alphaThreshold;
            }
            
            // Material includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Common/RayTracingProcedural.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"

            ${VFXGeneratedBlockFunction}

            [shader("closesthit")]
            void ClosestHit(inout RayIntersection rayIntersection : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
            {
                UNITY_XR_ASSIGN_VIEW_INDEX(DispatchRaysIndex().z);
                
                // Compute the distance of the ray
                rayIntersection.t = RayTCurrent();

                // TODO: Previous AABB for motion vector estimation
                rayIntersection.velocity = 0;
            }

            [shader("intersection")]
            void IntersectionShader()
            {
                UNITY_XR_ASSIGN_VIEW_INDEX(DispatchRaysIndex().z);
                
                VFXAttributes attributes;
                ZERO_INITIALIZE(VFXAttributes, attributes);
                
                // Index needs to be available in the context for the attribute load to work
                uint index = PrimitiveIndex();

                // Load the VFX attributes that we need for this
                ${VFXLoadAttributes}
                ${VFXProcessBlocks}
                ${VFXLoadSize}

                // Build the ray tracing procedural data
                RayTracingProceduralData rtProceduralData = BuildRayTracingProceduralData(attributes, size3);

                // Execute the matching intersection code
                IntersectPrimitive(rtProceduralData);
            }
            ENDHLSL
        }
