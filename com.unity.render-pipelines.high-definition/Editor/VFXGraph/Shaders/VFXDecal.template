#include "Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXLit.hlsl"

	${VFXBegin:VFXVertexAdditionalProcess}
	float4x4 viewToDecal = GetVFXToElementMatrix(
		attributes.axisX,
		attributes.axisY,
		attributes.axisZ,
		float3(attributes.angleX,attributes.angleY,attributes.angleZ),
		float3(attributes.pivotX,attributes.pivotY,attributes.pivotZ),
		size3,
		attributes.position);
		
	#if VFX_LOCAL_SPACE
	viewToDecal = mul(viewToDecal, VFXGetWorldToObjectMatrix());
	#endif
	viewToDecal = mul(viewToDecal, VFXGetViewToWorldMatrix());
	o.viewToDecal0 = viewToDecal[0];
	o.viewToDecal1 = viewToDecal[1];
	o.viewToDecal2 = viewToDecal[2];

	${VFXHDRPLitFillVaryings}
	${VFXEnd}

//TODO : Check for unnecessary includes / and for necessary ones
#define VFXComputePixelOutputToDBuffer(i, normalWS,outDBuffer) \
{ \
	DecalSurfaceData surfaceData; \
    ZERO_INITIALIZE(DecalSurfaceData, surfaceData); \
    VFXGetSurfaceDecalData(surfaceData,i,normalWS); \
 \
    ENCODE_INTO_DBUFFER(surfaceData, outDBuffer); \
}

void VFXGetSurfaceDecalData(out DecalSurfaceData surfaceData, VFX_VARYING_PS_INPUTS i, float3 normalWS)
{
	ZERO_INITIALIZE(DecalSurfaceData, surfaceData); 
	VFXTransformPSInputs(i);

//Check light layer
#if VFX_ENABLE_DECAL_LAYERS
	DecalPrepassData material;
    ZERO_INITIALIZE(DecalPrepassData, material);
	// Clip the decal if it does not pass the decal layer mask of the receiving material.
	// Decal layer of the decal
	uint decalLayerMask = 1; //TODO : Decide how to pass the decal layer + retrieve it

	DecodeFromDecalPrepass(i.pos.xy, material);

	if ((decalLayerMask & material.decalLayerMask) == 0)
	{
		clip(-1);
	}
  
#endif

	float3 clipPos;
	clipPos.xy = (i.pos.xy / _ScreenParams.xy) * 2.0f - 1.0f;
	clipPos.z = VFXSampleDepth(i.pos);
	clipPos *= VFXLinearEyeDepth(clipPos.z);

	float4 worldPos;
	worldPos.x = clipPos.x / UNITY_MATRIX_P[0][0];
	worldPos.y = clipPos.y / -UNITY_MATRIX_P[1][1];
	worldPos.z = (clipPos.z - UNITY_MATRIX_P[2][3]) / UNITY_MATRIX_P[2][2];
	worldPos.w = 1.0f;
	//Assumes worldPos is ViewPos ?
	float4x4 viewToElement;
	viewToElement[0] = i.viewToDecal0;
	viewToElement[1] = i.viewToDecal1;
	viewToElement[2] = i.viewToDecal2;
	viewToElement[3] = float4(0,0,0,1);
	
	float3 elementPos = mul(viewToElement,worldPos).xyz * 2.0f;
	clip(1.0f - abs(elementPos));

	float2 uv = elementPos.xy * 0.5f + 0.5f;
	VFXUVData uvData = GetUVData(uv);
    float angleFadeFactor = 1.0f;
	float3x3 elementToWorld = mul((float3x3)viewToElement, VFXGetWorldToViewRotMatrix()); //TODO: Won't be correct for non-uniform scalings
	elementToWorld[2] *= -1.0f; //TODO : Why ?

#if VFX_ENABLE_DECAL_LAYERS
	if (angleFade.y < 0.0f) // if angle fade is enabled
	{
		float3 decalNormal = normalize(elementToWorld[2].xyz);
		float dotAngle = dot(material.geomNormalWS, decalNormal);
		// See equation in DecalSystem.cs - simplified to a madd mul add here
		angleFadeFactor = saturate(angleFade.x + angleFade.y * (dotAngle * (dotAngle - 2.0f)));
	}
#endif

	fadeFactor *= angleFadeFactor;
	#if SHADERPASS == SHADERPASS_VFX_DBUFFER_PROJECTOR

	float4 color = float4(1,1,1,1);
    #if HDRP_USE_BASE_COLOR
    color *= VFXGetParticleColor(i);
    #elif HDRP_USE_ADDITIONAL_BASE_COLOR
    #if defined(VFX_VARYING_COLOR)
    color.xyz *= i.VFX_VARYING_COLOR;
    #endif
    #if defined(VFX_VARYING_ALPHA)
    color.a *= i.VFX_VARYING_ALPHA;
    #endif
    #endif
    #if HDRP_USE_BASE_COLOR_MAP
    float4 colorMap = SampleTexture(VFX_SAMPLER(baseColorMap),uvData);
    #if HDRP_USE_BASE_COLOR_MAP_COLOR
    color.xyz *= colorMap.xyz;
    #endif
    #if HDRP_USE_BASE_COLOR_MAP_ALPHA
    color.a *= colorMap.a;
    #endif
    #endif
	color.a *= fadeFactor;
    VFXClipFragmentColor(color.a,i);
    surfaceData.baseColor.rgb = saturate(color.rgb);
	surfaceData.baseColor.a = color.a;

	float albedoMapBlend = surfaceData.baseColor.a;
	float maskMapBlend = fadeFactor;

    #if HDRP_USE_MASK_MAP
    float4 mask = SampleTexture(VFX_SAMPLER(maskMap), uvData);
	surfaceData.mask = mask;
	surfaceData.mask.z = surfaceData.mask.w;
	maskMapBlend = mask.z * fadeFactor;
	#if VFX_MASK_BLEND_BASE_COLOR_ALPHA 
	surfaceData.mask.w = albedoMapBlend;
	#elif VFX_MASK_BLEND_MASK_BLUE // TODO : Careful, not the only two cases, e.g. when using opacity
	surfaceData.mask.w = maskMapBlend;
	#endif

    #endif

	float3 normalTS = SampleNormalMap(VFX_SAMPLER(normalMap),uvData);
	normalWS = normalize(mul(transpose(elementToWorld), normalTS));

	surfaceData.normalWS.xyz = normalWS; 
	#if VFX_NORMAL_BLEND_BASE_COLOR_ALPHA 
	surfaceData.normalWS.w = albedoMapBlend;
	#elif VFX_NORMAL_BLEND_MASK_BLUE // TODO : Careful, not the only two cases, e.g. when using opacity	surfaceData.mask.w = maskMapBlend;
	surfaceData.normalWS.w = maskMapBlend;
	#endif

	surfaceData.MAOSBlend.xy = float2(surfaceData.mask.w, surfaceData.mask.w);
	#endif
	#if SHADERPASS == SHADERPASS_VFX_DECAL_FORWARD_EMISSIVE
		#if defined(VFX_VARYING_EMISSIVE)
		surfaceData.emissive = i.VFX_VARYING_EMISSIVE * fadeFactor; // Handle Exposure
		#endif
	#endif


}

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXLitPixelOutput.hlsl"

