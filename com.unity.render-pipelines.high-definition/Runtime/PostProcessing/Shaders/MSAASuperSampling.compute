#pragma kernel MainUpsample

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/RTUpscale.hlsl"

TEXTURE2D_X_MSAA(float4, _ColorTextureMS);

void FsrSrtmF(inout float3 c)
{
    c*=rcp(max(max(c.r,c.g),c.b)+1.0);
}

// The extra max solves the c=1.0 case (which is a /0).
void FsrSrtmInvF(inout float3 c)
{
    c*=rcp(max(1.0/32768.0,1.0-max(max(c.r,c.g),c.b)));
}

float4 MsssTexF(int2 p, int s)
{
    float4 c = LOAD_TEXTURE2D_X_MSAA(_ColorTextureMS, p, s);
    FsrSrtmF(c.rgb);
    return c;
}

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/MSSS.hlsl"

TEXTURE2D_X(_InputDepthTexture);

RW_TEXTURE2D_X(CTYPE, _OutputTexture);
RW_TEXTURE2D_X(float, _OutputDepthTexture);
RW_TEXTURE2D_X(float2, _OutputMotionVectorTexture);

float4 _SourceSize;
float4 _ViewPortSize;

[numthreads(8,4,1)]
void MainUpsample (uint3 dti : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dti.z);
    float2 uvs = ((float2)dti.xy + 0.5f) * _ViewPortSize.zw;
    uint2 colorCoord = dti.xy;

    float2 scale = _SourceSize.xy / _ViewPortSize.xy;
    float4 sampledColor = float4(0,0,0,1);
    sampledColor.rgb = MsssF(
        //  p ....... integer pixel position in the output
        dti.xy,
        //  k0.xy ... input/output resolution
        //  k0.zw ... k0.xy * 0.5 - 0.5
        float4(scale.x,scale.y,scale.x*0.5-0.5,scale.y*0.5-0.5)).rgb;

    FsrSrtmInvF(sampledColor.rgb);
    _OutputTexture[COORD_TEXTURE2D_X(dti.xy)] = sampledColor;
    _OutputDepthTexture[COORD_TEXTURE2D_X(dti.xy)] = Nearest(_InputDepthTexture, uvs).x;
    _OutputMotionVectorTexture[COORD_TEXTURE2D_X(dti.xy)] = Bilinear(_CameraMotionVectorsTexture, uvs).xy;
}
