#ifdef SURFACE_GRADIENT
#undef SURFACE_GRADIENT
#endif
#ifdef DECAL_SURFACE_GRADIENT
#undef DECAL_SURFACE_GRADIENT
#endif

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/TextureXR.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Visibility/VisibilityOITResources.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/PostProcessDefines.hlsl"

#define VARIANT_DIR_PUNCTUAL_AREA_ENV 1
#define HAS_LIGHTLOOP

#define DISABLE_APPLY_DEBUG_TO_LIGHTING

#define SHADERPASS SHADERPASS_VBUFFER_LIGHTING_OFFSCREEN

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitProperties.hlsl"

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/ShaderPass/LitDepthPass.hlsl"

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitData.hlsl"

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/EntityLighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/SkyUtils.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/SDF2D.hlsl"

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariablesFunctions.hlsl"

//#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/HDShadow.hlsl"
//#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
//#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/PunctualLightCommon.hlsl"
//#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.cs.hlsl"
//#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
//#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Visibility/VisibilityOITResources.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Visibility/VBufferDeferredMaterialCommon.hlsl"

//#pragma enable_d3d11_debug_symbols
#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#pragma kernel MainResolveOffscreenLighting

#define GROUP_SIZE 8

TEXTURE2D_X(_DepthTexture);
RW_TEXTURE2D_X(float4, _OutputTexture);

float4 _VBufferLightingOffscreenParams;

uint GetOffscreenLightBufferWidth()
{
    return asuint(_VBufferLightingOffscreenParams.x);
}

BuiltinData GetBuiltinData(float3 normal, float roughness, float3 diffuseAlbedo)
{
    BuiltinData builtinData;
    ZERO_INITIALIZE(BuiltinData, builtinData);

    //builtinData.opacity = 0.5f;
//    real alphaClipTreshold;
//    real3 bakeDiffuseLighting;
//    real3 backBakeDiffuseLighting;
    builtinData.shadowMask0 = 1.0f;
    builtinData.shadowMask1 = 1.0f;
    builtinData.shadowMask2 = 1.0f;
    builtinData.shadowMask3 = 1.0f;
    builtinData.emissiveColor = 0.0f;
//    real2 motionVector;
//    real2 distortion;
//    real distortionBlur;
//    uint isLightmap;
//    uint renderingLayers;
//    float depthOffset;
//#if defined(UNITY_VIRTUAL_TEXTURING)
//    real4 vtPackedFeedback;
//#endif

    return builtinData;
}

SurfaceData GetSurfaceData(float3 normal, float roughness, float3 diffuseAlbedo)
{
    SurfaceData surfaceData;
    ZERO_INITIALIZE(SurfaceData, surfaceData);

    //uint materialFeatures;
    surfaceData.baseColor = diffuseAlbedo;
    surfaceData.specularOcclusion = 1.0f;
    surfaceData.normalWS = normal;
    surfaceData.perceptualSmoothness = RoughnessToPerceptualSmoothness(roughness);
    surfaceData.ambientOcclusion = 1.0f;
    surfaceData.metallic = 0.0f;
    //real coatMask;
    surfaceData.specularColor = DEFAULT_SPECULAR_VALUE;
    //uint diffusionProfileHash;
    //real subsurfaceMask;
    //real thickness;
    //float3 tangentWS;
    //real anisotropy;
    //real iridescenceThickness;
    //real iridescenceMask;
    //real3 geomNormalWS;
    //real ior;
    //real3 transmittanceColor;
    //real atDistance;
    //real transmittanceMask;

    return surfaceData;
}

BSDFData GetBSDFData(float3 normal, float roughness, float3 diffuseAlbedo)
{
    BSDFData outBSDF;
    ZERO_INITIALIZE(BSDFData, outBSDF);

    outBSDF.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD | MATERIALFEATUREFLAGS_LIT_TRANSMISSION | MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
    outBSDF.diffuseColor = diffuseAlbedo;
    outBSDF.fresnel0 = DEFAULT_SPECULAR_VALUE;
    outBSDF.ambientOcclusion = 1.0f;
    outBSDF.specularOcclusion = 1.0f;
    outBSDF.normalWS = normal;
    outBSDF.perceptualRoughness = RoughnessToPerceptualRoughness(roughness);
    //real coatMask;
    //uint diffusionProfileIndex;
    //real subsurfaceMask;
    //real thickness;
    //bool useThickObjectMode;
    //real3 transmittance;
    //float3 tangentWS;
    //float3 bitangentWS;
    //real roughnessT;
    //real roughnessB;
    //real anisotropy;
    //real iridescenceThickness;
    //real iridescenceMask;
    //real coatRoughness;
    outBSDF.geomNormalWS = normal;
    //real ior;
    //real3 absorptionCoefficient;
    //real transmittanceMask;

    return outBSDF;
}

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void MainResolveOffscreenLighting(int3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    if (any((float2)dispatchThreadId.xy > _ScreenSize.xy))
        return;

    PositionInputs posInputRaw = GetPositionInput(float2(dispatchThreadId.xy), _ScreenSize.zw, uint2(GROUP_SIZE, GROUP_SIZE));

    uint pixelOffset = posInputRaw.positionSS.y * _ScreenSize.x + posInputRaw.positionSS.x;
    uint listCount, listOffset;
    VisibilityOIT::GetPixelList(pixelOffset, listCount, listOffset);
    if (listCount == 0)
        return;

    float currentDepth = _DepthTexture[COORD_TEXTURE2D_X(posInputRaw.positionSS.xy)].x;
    float3 currentColor = _OutputTexture[COORD_TEXTURE2D_X(posInputRaw.positionSS.xy)].rgb;
    float3 lighting = float3(0.0f, 0.0f, 0.0f);
    int minDepth = 1.0;
    for (uint i = 0; i < listCount; ++i)
    {
        int globalOffset = i + listOffset;
        uint2 offscreenCoord = uint2(globalOffset % GetOffscreenLightBufferWidth(), globalOffset / GetOffscreenLightBufferWidth());

        Visibility::VisibilityData unusedVisData;
        uint2 unusedTexelCoord;
        float depthValue;
        VisibilityOIT::GetVisibilitySample(i, listOffset, unusedVisData, unusedTexelCoord, depthValue);

        if (depthValue < currentDepth)
            continue;

        minDepth = max(depthValue, minDepth);

        int2 tileCoord = (float2)posInputRaw.positionSS.xy / GetTileSize();
        PositionInputs posInput = GetPositionInput(posInputRaw.positionSS.xy, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), tileCoord);

        float3 V = GetWorldSpaceNormalizeViewDir(posInput.positionWS);

        // .
        uint4 packedOITGBuffer = _VisOITOffscreenGBuffer[COORD_TEXTURE2D_X(offscreenCoord)].rgba;
        float3 normal;
        float roughness;
        float3 diffuseAlbedo;
        VisibilityOIT::UnpackOITGBufferData(packedOITGBuffer, normal, roughness, diffuseAlbedo);

        BSDFData bsdfData = GetBSDFData(normal, roughness, diffuseAlbedo);
        BuiltinData builtinData = GetBuiltinData(normal, roughness, diffuseAlbedo);

        PreLightData preLightData = GetPreLightData(V, posInput, bsdfData);
        LightLoopOutput lightLoopOutput;
        //LIGHT_FEATURE_MASK_FLAGS_OPAQUE | MATERIAL_FEATURE_MASK_FLAGS
        // LIGHT_FEATURE_MASK_FLAGS_OPAQUE | MATERIALFEATUREFLAGS_LIT_STANDARD | LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT
        LightLoop(V, posInput, preLightData, bsdfData, builtinData, LIGHT_FEATURE_MASK_FLAGS_OPAQUE | MATERIALFEATUREFLAGS_LIT_STANDARD | LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT, lightLoopOutput);

        float3 diffuseLighting = lightLoopOutput.diffuseLighting;
        float3 specularLighting = lightLoopOutput.specularLighting;

        diffuseLighting *= GetCurrentExposureMultiplier();
        specularLighting *= GetCurrentExposureMultiplier();

        lighting += float3(1, 0, 0);// diffuseLighting + specularLighting;
    }

    lighting /= (float)listCount;
    lighting += currentColor;

    _OutputTexture[COORD_TEXTURE2D_X(posInputRaw.positionSS.xy)] = float4(lighting, 1.0);
}
